/* Secant session EJB Object Implementation for TVSessionBean (safe).
 * generated by emit_jbo(Oct 25 2000) on 01/20/01 at 05:50:49 PM
 */
package Keyboard;
import secant.util.Money;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.math.*;
import secant.portable.persistence.*;



// begin_safe_imports
import Keyboard.clientBusinessObjects.*;
import secant.pos.*;
// end_safe_imports

public class TVSessionBean implements javax.ejb.SessionBean
	// begin_safe_additionalInterfaces
	// end_safe_additionalInterfaces
{
	boolean _removed_ = false;
	private javax.ejb.SessionContext _ctx;
	// begin_safe_members
	// end_safe_members

	// from SessionBean

	public void setSessionContext(javax.ejb.SessionContext ctx)
	{
		// begin_safe_unsetSessionContext
		// end_safe_unsetSessionContext
		_ctx = ctx;
	}

	public void ejbRemove()
	{
		if (_removed_)
			return;
		_removed_ = true;
		// begin_safe_ejbRemove
		// end_safe_ejbRemove
	}

	public void ejbActivate()
	{
		// begin_safe_ejbActivate
		// end_safe_ejbActivate
	}

	public void ejbPassivate()
	{
		// begin_safe_ejbPassivate
		// end_safe_ejbPassivate
	}

	public TVSessionBean()
	{
		// begin_safe_constructNoArgs
		// end_safe_constructNoArgs
	}


	// attribute accessor methods


	// operations


	// begin_safe_greeting_javadoc_comment
	// end_safe_greeting_javadoc_comment
	public java.lang.String greeting()
        // begin_safe_greeting_throws
        // end_safe_greeting_throws

	{
        // begin_safe_greeting
        return "Hello World";
        // end_safe_greeting
	}


	// begin_safe_ejbCreate_javadoc_comment
	// end_safe_ejbCreate_javadoc_comment
	public void ejbCreate() throws  javax.ejb.CreateException
        // begin_safe_createTVSessionBean_throws
        // end_safe_createTVSessionBean_throws

	{
        // begin_safe_createTVSessionBean
        // end_safe_createTVSessionBean
	}


	// begin_safe_storeAll_javadoc_comment
	// end_safe_storeAll_javadoc_comment
	public void storeAll(byte[] objectGraph)
        // begin_safe_storeAll_throws
        throws Exception
        // end_safe_storeAll_throws

	{
        // begin_safe_storeAll

          Visitable objectsToStore = (Visitable) Serializer.getSingleton().deserialize( objectGraph );
          System.out.println( "<100> TVSessionBean.StoreAll -- deserialized object graph is: " );
          objectsToStore.accept( new VisitorPrinter() );
          objectsToStore.accept( new VisitorUpdater() );

        // end_safe_storeAll
	}


	// begin_safe_testCreateOne_javadoc_comment
	// end_safe_testCreateOne_javadoc_comment
	public void testCreateOne()
        // begin_safe_testCreateOne_throws
        throws secant.portable.persistence.PersistenceException
        // end_safe_testCreateOne_throws

	{
        // begin_safe_testCreateOne

        TVPCa.createTVPCa( Keyboard.IDs.nextId().longValue() );

        // end_safe_testCreateOne
	}


	// begin_safe_testCreateAll_javadoc_comment
	// end_safe_testCreateAll_javadoc_comment
	public void testCreateAll()
        // begin_safe_testCreateAll_throws
        throws secant.portable.persistence.PersistenceException
        // end_safe_testCreateAll_throws

	{
        // begin_safe_testCreateAll
        TVPComposite branches[];
        TVPComponent leaves[];

      branches = new TVPComposite[3];
      leaves = new TVPComponent[4];
      branches[0] = TVPComposite.createTVPComposite( Keyboard.IDs.nextId().longValue() );
      branches[1] = TVPComposite.createTVPComposite( Keyboard.IDs.nextId().longValue() );
      branches[2] = TVPComposite.createTVPComposite( Keyboard.IDs.nextId().longValue() );
      leaves[0] = TVPCa.createTVPCa( Keyboard.IDs.nextId().longValue() );
      leaves[1] = TVPCb.createTVPCb( Keyboard.IDs.nextId().longValue() );
      leaves[2] = TVPCa.createTVPCa( Keyboard.IDs.nextId().longValue() );
      leaves[3] = TVPCb.createTVPCb( Keyboard.IDs.nextId().longValue() );

      branches[0].setName( "branch_one" );
      branches[1].setName( "branch_two" );
      branches[2].setName( "branch_three" );
      leaves[0].setName( "leaf_one" );
      leaves[1].setName( "leaf_two" );
      leaves[2].setName( "leaf_three" );
      leaves[3].setName( "leaf_four" );

      branches[0].addChild( branches[2] );
      branches[0].addChild( leaves[0] );
      branches[0].addChild( leaves[1] );
      branches[1].addChild( leaves[2] );
      branches[1].addChild( leaves[3] );
      branches[1].addChild( branches[0] );
      branches[2].addChild( branches[1] );

        // end_safe_testCreateAll
	}


	// begin_safe_retrieveAll_javadoc_comment
	// end_safe_retrieveAll_javadoc_comment
	public byte[] retrieveAll(long seedID, java.lang.String seedClass)
        // begin_safe_retrieveAll_throws
        throws secant.portable.persistence.PersistenceException, java.lang.ClassNotFoundException, java.lang.Exception
        // end_safe_retrieveAll_throws

	{
        // begin_safe_retrieveAll

          PersistenceService ps = PersistenceService.getInstance();
          Visitable persistentSeed;
          Visitable transientGraph;

          persistentSeed = (Visitable) ps.readObject( Class.forName("Keyboard." + seedClass), new Long( seedID ), null );

          VisitorRetriever aVisitorRetriever = new VisitorRetriever();

          persistentSeed.accept( aVisitorRetriever );

          transientGraph = aVisitorRetriever.getOther();

          return Serializer.getSingleton().serialize( transientGraph );

        // end_safe_retrieveAll
	}


	// begin_safe_retrieveAllFromStub_javadoc_comment
	// end_safe_retrieveAllFromStub_javadoc_comment
	public byte[] retrieveAllFromStub(byte[] stub)
        // begin_safe_retrieveAllFromStub_throws
        throws secant.portable.persistence.PersistenceException, java.lang.ClassNotFoundException, java.lang.Exception
        // end_safe_retrieveAllFromStub_throws

	{
        // begin_safe_retrieveAllFromStub

          Visitable transientGraph;

          Stub stubObj = (Stub) Serializer.getSingleton().deserialize( stub );

          Visitable persistentSeed = stubObj.findPersistentObject();

          VisitorRetriever aVisitorRetriever = new VisitorRetriever();

          persistentSeed.accept( aVisitorRetriever );

          transientGraph = aVisitorRetriever.getOther();

          return Serializer.getSingleton().serialize( transientGraph );

        // end_safe_retrieveAllFromStub
	}


	// begin_safe_clearDB_javadoc_comment
	// end_safe_clearDB_javadoc_comment
	public void clearDB()
        // begin_safe_clearDB_throws
        // end_safe_clearDB_throws

	{
        // begin_safe_clearDB
        ObjectMgr pom;
        javax.transaction.UserTransaction current;
        DataStore dataStore;
        try
        {
          pom = ObjectMgr.instance;
          pom.SymmetricAssocView = true;
          dataStore = pom.allocateDataStore("default");
          dataStore.execute("delete from Assoc_15729533", true);
          dataStore.execute("delete from TVPComposite", true);
          dataStore.execute("delete from TVPCa", true);
          dataStore.execute("delete from TVPCb", true);
          dataStore.release();
        }
        catch( Exception e )
        {
          e.printStackTrace();
        }

        // end_safe_clearDB
	}


	// begin_safe_execute_javadoc_comment
	// end_safe_execute_javadoc_comment
	public void execute(byte[] command)
        // begin_safe_execute_throws
        throws Exception
        // end_safe_execute_throws

	{
        // begin_safe_execute

          CommandInterface aCommand;
          aCommand = (CommandInterface) Serializer.getSingleton().deserialize( command );
          aCommand.execute();

        // end_safe_execute
	}

	// begin_safe_additional_methods
	// end_safe_additional_methods
}

// begin_safe_other
// end_safe_other


/*    -- begin
// begin_safe_ORPHANED_SAFE_BLOCKS
// begin_safe_retrieveOne_throws
        throws secant.portable.persistence.PersistenceException, java.lang.ClassNotFoundException, java.lang.Exception
// end_safe_retrieveOne_throws
// end_safe_ORPHANED_SAFE_BLOCKS
*/ // -- end
