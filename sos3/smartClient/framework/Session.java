/* Generated by Together */

package smartClient.framework;

import java.rmi.*;
import java.rmi.server.*;
import java.util.*;

/**
 * Title:        Smart Client Framework<br>
 * Copyright:    Copyright (c) Steve McDaniel<br>
 * Company:      Smart Client Framework inc.<br>
 * @author Steve McDaniel
 * @version 1.0
 */
public class Session extends UnicastRemoteObject implements SessionInterface
{
	public Session() throws RemoteException
    {
    }

  protected void printObjectGraph( Persistable memberInGraph, String message )
  {
    memberInGraph.getAssociationsCoordinator().setPreservingStubs( true );
    System.out.println( message );
    memberInGraph.accept( new VisitorFullPrinterIgnoreClamps() );
    memberInGraph.getAssociationsCoordinator().setPreservingStubs( false );
  }

    public void dumpDB( Stub seedForFlood, String message ) throws RemoteException
    {
          printObjectGraph( seedForFlood.findPersistentObject(), message );
    }

	public String greetings() throws RemoteException
    {
    	return "Hello. I'm a Session. My middleware framework thinks it's " + SmartClientFramework.getSingleton().whereAmI() + ".";
    }

	public long allocateIDs( int quantity ) throws RemoteException
    {
    	return ServerSideIDFactory.getSingleton().allocateIDs( quantity );
    }

    public void clearDB() throws RemoteException
    {
    }

    public Persistable retrieveAllFromStubs( List seedStubs ) throws RemoteException
    {
          VisitorRetriever aVisitorRetriever = new VisitorRetriever();
          Stub seedStub = null;
          Persistable persistentSeed = null;
          for( Iterator anIterator = seedStubs.iterator(); anIterator.hasNext(); )
          {
          	seedStub = (Stub) anIterator.next();
            if( ! aVisitorRetriever.getAssociationsCoordinator().workingSetContains( seedStub ) )
            {
          		persistentSeed = seedStub.findPersistentObject();
                aVisitorRetriever.resetOther();
          		persistentSeed.accept( aVisitorRetriever );
            }

          }
          return (Persistable) aVisitorRetriever.getOther();
    }

    public Persistable retrieveAllFromStub( Stub seedStub ) throws RemoteException
    {
          Persistable persistentSeed = seedStub.findPersistentObject();
          VisitorRetriever aVisitorRetriever = new VisitorRetriever();
          persistentSeed.accept( aVisitorRetriever );
          return (Persistable) aVisitorRetriever.getOther();
    }

    public void execute( CommandInterface command ) throws RemoteException
    {
		command.execute();
    }

    public void setPropertiesUsing( String filename ) throws RemoteException
    {
    	SmartClientFramework.getSingleton().setPropertiesUsing( filename );
    }


}
