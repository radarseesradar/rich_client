/* Generated by Together */

package smartClient.framework;

import java.util.*;
import model.*;

/**
 * Title:        Smart Client Framework<br>
 * Copyright:    Copyright (c) Steve McDaniel<br>
 * Company:      Smart Client Framework inc.<br>
 * @author Steve McDaniel
 * @version 1.0
 */
public class PropagatorRetriever extends PropagatorSynchronizer 
{
	public PropagatorRetriever( Visitor _delegator, Object _attributeOwner, String _attributeName, Class _elementType )
    {
    	super(   _delegator,  _attributeOwner,  _attributeName,  _elementType );
    }

	public PropagatorRetriever( Visitor _delegator, Object _attributeOwner, String _attributeName, Class _elementType,
    String _inverseAttributeName, Class _inverseElementType )
    {
    	super(   _delegator,  _attributeOwner,  _attributeName,  _elementType, _inverseAttributeName, _inverseElementType );
    }


	protected void selectOneToManyTransition( Object nextThis )
    {
		if( (nextThis!= null)
		&& ! ( getDelegator().wasPreviouslyTransitioned( new Transition( getAttributeOwner(), getAttributeName(), nextThis ) ) ) )
		{
			getNonTransitionedMembers().add( nextThis );
		}
    }

	protected void recordOneToManyTransition( Object nextThis )
    {
		getDelegator().addPreviouslyTransitioned( new Transition( getAttributeOwner(), getAttributeName(), nextThis ) );
		if( ! getDelegator().isClamped( new Transition( getAttributeOwner(), getAttributeName(), nextThis ) ) )
			getDelegator().addPreviouslyTransitioned( new Transition( nextThis, getInverseAttributeName(), getAttributeOwner() ) );
    }

	protected void performOneToManyTransition( Object nextThis )
    {
        Persistable nextOther = getDelegator().createOther( nextThis );

		if( getDelegator().isClamped( new Transition( getAttributeOwner(), getAttributeName(), nextThis ) ) )
		{
			((VisitorSynchronizer)getDelegator()).addToManyDestination( getDelegator().getOther(), getAttributeName(),
		   								 SwizzleProxy.createStubbedProxyFor( nextOther ), getOtherElementType() );
		}
		else
		{
			((VisitorSynchronizer)getDelegator()).addToManyDestination( getDelegator().getOther(), getAttributeName(), nextOther,
										  getOtherElementType() );
			((Persistable)nextThis).accept( ((VisitorSynchronizer)getDelegator()).propagationVisitor( (Persistable) nextOther ) );
		}
    }

	protected void performToManyTransition( Object nextThis )
    {
        Persistable nextOther = getDelegator().createOther( nextThis );
		((VisitorSynchronizer)getDelegator()).addToManyDestination( getDelegator().getOther(), getAttributeName(), nextOther,
									  getOtherElementType() );
		((Persistable)nextThis).accept( ((VisitorSynchronizer)getDelegator()).propagationVisitor( (Persistable) nextOther ) );
    }

}


