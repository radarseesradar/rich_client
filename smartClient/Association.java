/* Generated by Together */

package com.togethersoft.modules.smartClient;

import com.togethersoft.openapi.rwi.RwiLink;

public class Association
{

	public interface UserDefinedPropertyName
    {
		String CLIENT_ROLE = "clientRole";
        String CLIENT_CARDINALITY = "clientCardinality";
        String SUPPLIER_ROLE = "supplierRole";
        String SUPPLIER_CARDINALITY = "supplierCardinality";
        String ASSOCIATES = "associates";
        String UNDIRECTED = "undirected";
        String DIRECTED = "directed";
    }

	public String toString()
    {
    	return this.getClientEnd().toString() + "\n" + this.getSupplierEnd().toString();
    }

  	public Association( RwiLink aLink )
    {
    	this.link = aLink;
        this.clientEnd = new ClientEnd( this );
        this.supplierEnd = new SupplierEnd( this );
    }

	public void extractModelInfo()
    {
    	this.getClientEnd().extractModelInfo( this.getLink() );
        this.getSupplierEnd().extractModelInfo( this.getLink() );
    }

	public void generateCode()
    {
    	if( this.getClientEnd().getUpperCardinality().equals( Cardinality.ONE )
        && this.getSupplierEnd().getUpperCardinality().equals( Cardinality.MANY ) )
        {
        	this.setCodeGenerator( new OneToManyGenerator() );
        }
    	else if( this.getClientEnd().getUpperCardinality().equals( Cardinality.ONE )
        && this.getSupplierEnd().getUpperCardinality().equals( Cardinality.ONE ) )
        {
        	this.setCodeGenerator( new OneToOneGenerator() );
        }
    	else if( this.getClientEnd().getUpperCardinality().equals( Cardinality.MANY )
        && this.getSupplierEnd().getUpperCardinality().equals( Cardinality.MANY ) )
        {
        	this.setCodeGenerator( new ManyToManyGenerator() );
        }
    	else if( this.getClientEnd().getUpperCardinality().equals( Cardinality.NONE )
        && this.getSupplierEnd().getUpperCardinality().equals( Cardinality.ONE ) )
        {
        	this.setCodeGenerator( new ToOneGenerator() );
        }
    	else if( this.getClientEnd().getUpperCardinality().equals( Cardinality.NONE )
        && this.getSupplierEnd().getUpperCardinality().equals( Cardinality.MANY ) )
        {
        	this.setCodeGenerator( new ToManyGenerator() );
        }
    	else if( this.getClientEnd().getUpperCardinality().equals( Cardinality.MANY )
        && this.getSupplierEnd().getUpperCardinality().equals( Cardinality.ONE ) )
        {
        	this.setCodeGenerator( new ManyToOneGenerator() );
        }

		if( this.getCodeGenerator() != null )
        {
        	this.getCodeGenerator().generateCode( (ClientEnd) this.getClientEnd() );
            this.getCodeGenerator().generateCode( (SupplierEnd) this.getSupplierEnd() );
        }
    }

	RwiLink getLink()
    {
    	return this.link;
    }

	AssociationEnd getClientEnd()
    {
    	return this.clientEnd;
    }

	AssociationEnd getSupplierEnd()
    {
    	return this.supplierEnd;
    }

	private void setCodeGenerator( CodeGenerator aGenerator )
    {
    	this.codeGenerator = aGenerator;
    }

	private CodeGenerator getCodeGenerator()
    {
    	return this.codeGenerator;
    }


	private AssociationEnd clientEnd;  // Corresponds to where link was drawn from, A.K.A. source.
	private AssociationEnd supplierEnd;  // Corresponds to where link was drawn to,  A.K.A. destination.
    private CodeGenerator codeGenerator;  // A double dispatch pattern to isolate code generation.
    private RwiLink link;  // Representation of association in model.

}
