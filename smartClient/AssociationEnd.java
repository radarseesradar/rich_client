/* Generated by Together */

package com.togethersoft.modules.smartClient;

import com.togethersoft.openapi.rwi.RwiElement;
import com.togethersoft.openapi.rwi.RwiLink;
import com.togethersoft.openapi.rwi.RwiProperty;
import com.togethersoft.openapi.rwi.RwiNode;
import com.togethersoft.openapi.rwi.RwiMember;
import com.togethersoft.openapi.rwi.enum.RwiMemberEnumeration;
import com.togethersoft.openapi.rwi.RwiShapeType;

public abstract class AssociationEnd
{
	AssociationEnd( Association theAssociation )
    {
    	this.association = theAssociation;
    }

	public String toString()
    {
    	return "role: " + this.getRole()
        + "; upperCardinality: " + this.getUpperCardinality()
        + "; rolesClassName: " + this.getRolesClassName()
        + "; field: " + this.getField();
    }

	abstract void extractModelInfo( RwiLink link );

	Association getAssociation()
    {
    	return this.association;
    }

	String getUpperCardinality()
    {
    	return this.upperCardinality;
    }

	String getRole()
    {
    	return this.role;
    }

	void setRole( String aRole )
    {
    	this.role = aRole;
    }

	void setUpperCardinality( String cardinality )
    {
    	this.upperCardinality = cardinality;
    }

	void setField( RwiElement aField )
    {
    	this.field = aField;
    }

	void deriveUpperCardinality()
    {
    	if( this.rawCardinality == null || this.rawCardinality.equals( "" ) )
        {
        	setUpperCardinality( Cardinality.NONE );
        }
        else if( this.rawCardinality.endsWith( "1" ) )
        {
        	setUpperCardinality( Cardinality.ONE );
        }
        else if( this.rawCardinality.endsWith( "*" ) )
        {
        	setUpperCardinality( Cardinality.MANY );
        }
    }

	void setRawCardinality( String aCardinality )
    {
    	this.rawCardinality = aCardinality;
    }

	String getRolesClassName()
    {
    	return this.rolesClassName;
    }

	void setRolesClassName( String aClassName )
    {
    	this.rolesClassName = aClassName;
    }

	RwiElement getField()
    {
    	return this.field;
    }

	void setContainingClass( RwiNode aClassInModel )
    {
    	this.containingClass = aClassInModel;
    }

	RwiNode getContainingClass()
    {
    	return this.containingClass;
    }

	RwiElement findField()
    {
        RwiMember nextMember = null;
    	RwiMemberEnumeration members = this.getContainingClass().members();
        while( members.hasMoreElements() )
        {
        	nextMember = members.nextRwiMember();
            if( RwiShapeType.ATTRIBUTE.equals(nextMember.getProperty(RwiProperty.SHAPE_TYPE) )
            && nextMember.getProperty( RwiProperty.NAME ).equals( this.getRole() ) )
            {
				return nextMember;
            }
        }
        return null;
    }

	RwiElement findMethod( String methodName )
    {
        RwiMember nextMember = null;
    	RwiMemberEnumeration members = this.getContainingClass().members();
        while( members.hasMoreElements() )
        {
        	nextMember = members.nextRwiMember();
            if( RwiShapeType.OPERATION.equals(nextMember.getProperty(RwiProperty.SHAPE_TYPE) )
            && nextMember.getProperty( RwiProperty.NAME ).equals( methodName ) )
            {
				return nextMember;
            }
        }
        return null;
    }

	abstract AssociationEnd getOtherEnd();

	/* Role and field are gathered together here in one place.  However in the model, they reside
    *  on opposite ends of the association.  They are brought together because the field is the implementation
    *  of the role.  The AssociationEnd corresponds to the side that the role is on, with the caveat that the
    *  field is actually on the other side.
    */
	private String role;  // Implemented by member below.
    private String rawCardinality;  // Cardinaliy string as it appears in the model
    private String upperCardinality; // NONE, ONE, or MANY depending on upper bound multiplicity
    private Association association;  // Parent of both ends of the association
    private RwiElement field;  // Resides on opposite side of association from role in model.
    private String rolesClassName;   // forward link, inverse class for bidirectionals is held by other AssociationEnd.
    private RwiNode containingClass;  // The class in which the field and the field's acessing methods reside.

}
