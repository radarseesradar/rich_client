/* Generated by Together */

package com.togethersoft.modules.smartClient;

import com.togethersoft.openapi.rwi.RwiProperty;
import com.togethersoft.openapi.rwi.RwiElement;
import com.togethersoft.openapi.rwi.RwiPattern;
import com.togethersoft.openapi.rwi.RwiMember;

abstract public class CommonGenerator
{
	void adjustField( SupplierEnd aSupplierEnd, String scType, String scClass )
    {
		adjustField( (AssociationEnd) aSupplierEnd, scType, scClass  );
        if( aSupplierEnd.getField() != null )
        {
    		aSupplierEnd.getField().setProperty( Association.UserDefinedPropertyName.ASSOCIATES,
        		"<{" + aSupplierEnd.getRolesClassName() + "}>" );
        }
    }

	void adjustUnidirectionalField( AssociationEnd anEnd, String scType, String scClass )
    {
    	// Make sure we have a field, creating it if necessary.
        if( ! ensureFieldExists( anEnd )  )
        {
        	return;
        }

		// If we have a field, then adjust it.
    	anEnd.getField().setProperty( RwiProperty.NAME, anEnd.getRole() );
    	anEnd.getField().setProperty( RwiProperty.TYPE, scType );
        anEnd.getField().setProperty( RwiProperty.INITIAL_VALUE,
				"new " + scClass + "( this, \""
                + anEnd.getRole()
                + "\", \""
                + anEnd.getRolesClassName()
                + "\" )" );
   		anEnd.getField().setProperty( Association.UserDefinedPropertyName.ASSOCIATES,
       		"<{" + anEnd.getRolesClassName() + "}>" );
    	anEnd.getField().setProperty( Association.UserDefinedPropertyName.DIRECTED, true );
    }

	void adjustField( AssociationEnd anEnd, String scType, String scClass )
    {
    	// Make sure we have a field, creating it if necessary.
        if( ! ensureFieldExists( anEnd )  )
        {
        	return;
        }

		// If we have a field, then adjust it.
    	anEnd.getField().setProperty( RwiProperty.NAME, anEnd.getRole() );
    	anEnd.getField().setProperty( RwiProperty.TYPE, scType );
        anEnd.getField().setProperty( RwiProperty.INITIAL_VALUE,
				"new " + scClass + "( this, \""
                + anEnd.getRole()
                + "\", \""
                + anEnd.getRolesClassName()
                + "\", \""
                + anEnd.getOtherEnd().getRole()
                + "\" )" );
    }

	void generateGetOne( AssociationEnd anEnd )
    {
    	RwiMember modelsGetterMethod = null;
    	String getterMethodName = AccessMethodNameGenerator.getSingleton().getter( anEnd.getRole() );
        modelsGetterMethod = (RwiMember) anEnd.findMethod( getterMethodName );
        if( modelsGetterMethod == null )
        {
			modelsGetterMethod = anEnd.getContainingClass().createMemberByPattern( RwiPattern.DEFAULT_OPERATION );
        }
        if( modelsGetterMethod == null )
        {
        	return;
        }
        modelsGetterMethod.setProperty( RwiProperty.NAME, getterMethodName );
        modelsGetterMethod.setProperty( RwiProperty.PUBLIC, true );
        modelsGetterMethod.setProperty( RwiProperty.RETURN_TYPE, anEnd.getRolesClassName() );
        modelsGetterMethod.setProperty( RwiProperty.BODY,
        		"return ("
                + anEnd.getRolesClassName()
                + ") this."
                + anEnd.getRole()
                + ".get();" );

    }

	void generateGetAll( AssociationEnd anEnd )
    {
    	RwiMember modelsGetterMethod = null;
    	String getterMethodName = AccessMethodNameGenerator.getSingleton().getter( anEnd.getRole() );
        modelsGetterMethod = (RwiMember) anEnd.findMethod( getterMethodName );
        if( modelsGetterMethod == null )
        {
			modelsGetterMethod = anEnd.getContainingClass().createMemberByPattern( RwiPattern.DEFAULT_OPERATION );
        }
        if( modelsGetterMethod == null )
        {
        	return;
        }
        modelsGetterMethod.setProperty( RwiProperty.NAME, getterMethodName );
        modelsGetterMethod.setProperty( RwiProperty.PUBLIC, true );
        modelsGetterMethod.setProperty( RwiProperty.RETURN_TYPE, "Collection" );
        modelsGetterMethod.setProperty( RwiProperty.BODY,
        		"return this."
                + anEnd.getRole()
                + ".getAll();" );

    }

	void generateSetter( AssociationEnd anEnd )
    {
    	RwiMember modelsSetterMethod = null;
    	String setterMethodName = AccessMethodNameGenerator.getSingleton().setter( anEnd.getRole() );
        modelsSetterMethod = (RwiMember) anEnd.findMethod( setterMethodName );
        if( modelsSetterMethod == null )
        {
			modelsSetterMethod = anEnd.getContainingClass().createMemberByPattern( RwiPattern.DEFAULT_OPERATION );
        }
        if( modelsSetterMethod == null )
        {
        	return;
        }
        modelsSetterMethod.setProperty( RwiProperty.NAME, setterMethodName );
        modelsSetterMethod.setProperty( RwiProperty.PUBLIC, true );
        modelsSetterMethod.setProperty( RwiProperty.RETURN_TYPE, "void" );
        modelsSetterMethod.setProperty( RwiProperty.PARAMETERS_TEXT, anEnd.getRolesClassName() + " zzz " );
        modelsSetterMethod.setProperty( RwiProperty.BODY,
        		"this."
                + anEnd.getRole()
                + ".set( zzz );" );

    }

	void generateAdder( AssociationEnd anEnd )
    {
    	RwiMember modelsAdderMethod = null;
    	String adderMethodName = AccessMethodNameGenerator.getSingleton().adder( anEnd.getRole() );
        modelsAdderMethod = (RwiMember) anEnd.findMethod( adderMethodName );
        if( modelsAdderMethod == null )
        {
			modelsAdderMethod = anEnd.getContainingClass().createMemberByPattern( RwiPattern.DEFAULT_OPERATION );
        }
        if( modelsAdderMethod == null )
        {
        	return;
        }
        modelsAdderMethod.setProperty( RwiProperty.NAME, adderMethodName );
        modelsAdderMethod.setProperty( RwiProperty.PUBLIC, true );
        modelsAdderMethod.setProperty( RwiProperty.RETURN_TYPE, "void" );
        modelsAdderMethod.setProperty( RwiProperty.PARAMETERS_TEXT, anEnd.getRolesClassName() + " zzz " );
        modelsAdderMethod.setProperty( RwiProperty.BODY,
        		"this."
                + anEnd.getRole()
                + ".add( zzz );" );

    }

	void generateRemoveOneOfMany( AssociationEnd anEnd )
    {
    	RwiMember modelsRemoverMethod = null;
    	String removerMethodName = AccessMethodNameGenerator.getSingleton().remover( anEnd.getRole() );
        modelsRemoverMethod = (RwiMember) anEnd.findMethod( removerMethodName );
        if( modelsRemoverMethod == null )
        {
			modelsRemoverMethod = anEnd.getContainingClass().createMemberByPattern( RwiPattern.DEFAULT_OPERATION );
        }
        if( modelsRemoverMethod == null )
        {
        	return;
        }
        modelsRemoverMethod.setProperty( RwiProperty.NAME, removerMethodName );
        modelsRemoverMethod.setProperty( RwiProperty.PUBLIC, true );
        modelsRemoverMethod.setProperty( RwiProperty.RETURN_TYPE, "void" );
        modelsRemoverMethod.setProperty( RwiProperty.PARAMETERS_TEXT, anEnd.getRolesClassName() + " zzz " );
        modelsRemoverMethod.setProperty( RwiProperty.BODY,
        		"this."
                + anEnd.getRole()
                + ".remove( zzz );" );

    }

	private boolean ensureFieldExists( AssociationEnd anEnd )
    {
    	// Make sure we have a field, creating it if necessary.
    	RwiElement aField = anEnd.getField();
        if( aField == null )
        {
        	aField = anEnd.findField();
        }
    	if( aField == null )
        {
        	aField = anEnd.getContainingClass().createMemberByPattern( RwiPattern.DEFAULT_ATTRIBUTE );
        }
        anEnd.setField( aField );
        if( aField == null )
        {
        	return false;
        }
        return true;
    }
}
